---
title: "Python 学习笔记01"
layout: post
date: 2016-01-11 22:48
tag:
 - Python
 - Learn
 - 笔记
blog: true
author: Topaz
summary: "Extra markdown components like highlighted text, side-by-side items, starring/highlighting a blog or project, and embedding gists, videos etc"
permalink: Python-Learn-note01
---

<h1 class="title"> Python 学习笔记01 </h1>

<h2> Content </h2>
- [编程语言的分类](#c1)

<h2 id="c1">编程语言的分类（主要有以下几个角度）</h2>
<h4>编译型和解释型</h4>
<h5>编译型语言（c，c++，go，swift）</h5>
优点：运行时不需要编译，执行效率高，可以脱离语言环境独立运行
缺点：平台兼容性差，需要根据运行的操作系统环境编译成不同的可执行文件

<h5>解释型语言（python，ruby，php，perl）</h5>
优点：平台兼容性好，代码可以直接修改，不用停机维护
缺点：每次运行都要解释，性能不如编译型语言
{% highlight raw %}
- 编译器：把源程序的语句都编译成机器语言，保存成二进制文件，运行时直接运行机器语言，速度很快
- 解释器：执行程序时，才一条条解释成机器语言给计算机执行，运行速度不如编译后的程序快
{%endlight}
<h4>静态语言和动态语言</h4>
<h5>动态类型语言</h5>
运行期间才做数据类型检查的语言，第一次赋值给变量时，在内部将数据类型记录下来，python和ruby就是动态类型语言		
<h5>静态类型语言</h5>
在编译期间检查数据类型的语言，写程序时要声明所有变量的数据类型，c/c++就静态类型语言代表

<h4>强类型定义语言和弱类型定义语言</h4>
<h5>强类型定义语言</h5>
一个变量被指定了某个数据类型，需要强制转换才能更改类型，速度不如弱类型语言，但是严谨性能避免许多错误
<h5>弱类型定义语言</h5>
数据类型可以被忽略的语言，与强类型语言相反，一个变量可以赋不同数据类型的值

>小结： python是一门解释型动态强类型语言





























