---
title: "Python 学习笔记 01"
layout: post
date: 2016-01-11 22:48
tag:
 - Python
 - Learn
 - 笔记
blog: true
author: Topaz
summary: "Extra markdown components like highlighted text, side-by-side items, starring/highlighting a blog or project, and embedding gists, videos etc"
permalink: Python-Learn-note01
---

<h1 class="title"> Python 学习笔记 01 </h1>

<h2> Table of Contents </h2>
- [编程语言的分类](#c1)
- [Python 优缺点](#c2)
- [Python 解释器](#c3)
- [简述 Python 运行过程](#c4)
- [变量定义规则](#c5)
- [数据类型](#c6)

<h2 id="c1">编程语言的分类</h2>
主要有以下几个维度
<h4>编译型和解释型</h4>
{% highlight raw %}
编译型语言（c，c++，go，swift）
- 优点：运行时不需要编译，执行效率高，可以脱离语言环境独立运行
- 缺点：平台兼容性差，需要根据运行的操作系统环境编译成不同的可执行文件

解释型语言（python，ruby，php，perl）
- 优点：平台兼容性好，代码可以直接修改，不用停机维护
- 缺点：每次运行都要解释，性能不如编译型语言

编译器：把源程序的语句都编译成机器语言，保存成二进制文件，运行时直接运行机器语言，速度很快
解释器：执行程序时，才一条条解释成机器语言给计算机执行，运行速度不如编译后的程序快
{% endhighlight %}

<h4>静态语言和动态语言</h4>
{% highlight raw %}
动态类型语言
 运行期间才做数据类型检查的语言，第一次赋值给变量时，在内部将数据类型记录下来，python和ruby就是动态类型语言		
静态类型语言
 在编译期间检查数据类型的语言，写程序时要声明所有变量的数据类型，c/c++就静态类型语言代表
{% endhighlight %}

<h4>强类型定义语言和弱类型定义语言</h4>
{% highlight raw %}
强类型定义语言
 一个变量被指定了某个数据类型，需要强制转换才能更改类型，速度不如弱类型语言，但是严谨性能避免许多错误
弱类型定义语言
 数据类型可以被忽略的语言，与强类型语言相反，一个变量可以赋不同数据类型的值
{% endhighlight %}

> <span style="color: #BB8FCE;font-weight: 500;"> Python是一门解释型动态强类型语言</span>


<h2 id="c2">Python 优缺点</h2>

<h4>优点</h4>
{% highlight raw %}
开发效率高
高级语言（不需要考虑底层细节），
可移植性（基本不需要修改就能运行在所有系统平台上），
可扩展性（python里面加入c，c++），
可嵌入性（可以把python嵌入到c，c++）
{% endhighlight %}
<h4>缺点</h4>
{% highlight raw %}
速度慢
代码不能加密（因为是解释型语言，源码都是明文形式的）
线程不能利用多CPU问题
{% endhighlight %}

<h2 id="c3">Python 解释器</h2>
Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。

<h2 id="c4">简述 Python 运行过程 </h2>
{% highlight raw %}
1.python程序首次运行时，编译结果保存在位于内存的pycodeobject中，当python程序运行结束时，python解释器则将pycodeobject写会pyc文件中
2.python程序第二次运行时，首先程序会在硬盘中找pyc文件，找到就直接载入否则重复上面过程
PS:pyc是pycodeobject的持久化保存方式
{% endhighlight %}

<h2 id="c5">变量定义规则</h2>
{% highlight raw %}
- 变量名只能是 字母、数字或下划线的任意组合
- 变量名的第一个字符不能是数字
- 以下关键字不能声明为变量名
	['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']
{% endhighlight %}

<h2 id="c6">数据类型</h2>
<h4>数字</h4>
- int（整型）	在32位机器上，整数的位数为32位，64位机器上，整数的位数为64位
- long（长整型）
- float（浮点型）
- complex（复数）
<h4>布尔值</h4>
真或假/1或0
<h4>字符串</h4>
操作：移除空白，分割，长度，索引，切片
PS：格式化输出字符串是%s，整数%d，浮点数%f
<h4>列表</h4>
操作：索引，切片，追加，删除，长度，切片，循环，包含
<h4>字典</h4>
操作：索引，新增，删除，键、值、键值对，循环，长度
{% highlight raw %}
person = {"name": "mr.wu", 'age': 18} 或 person = dict({"name": "mr.wu", 'age': 18})
{% endhighlight %}
<h4>元组</h4>
{% highlight raw %}
ages = (11, 22, 33, 44, 55) 或 ages = tuple((11, 22, 33, 44, 55))
{% endhighlight %}
<h4>运算</h4>
- 算数运算：+ - * / % ** //
- 比较运算： == != <> > < <= >=
- 赋值运算：= += -= *= /= %= 
- 逻辑运算：and，or，not
- 成员运算：in ，not in
- 身份运算：is ，is not
- 位运算：& | ^ 
- <a href="http://c.biancheng.net/cpp/html/1817.html">运算符优先级</a>













